#!/usr/bin/env bb

;; Generated by uberscriptify, do not edit directly.

(ns lib.opts
  (:require
    [clojure.string :as string]
    ))

(defn print-usage
  [script-name summary]
  (println "usage: " script-name " [opts]")
  (println " ")
  (println "options:")
  (println summary))

(defn find-errors
  [parsed]
  (let [{:keys [errors options]} parsed
        {:keys [help]} options]
    (cond
      help
      {:exit 0}

      errors
      {:message (string/join "\n" errors)
       :exit 1}
      )))

(defn print-errors
  [script-name parsed errors]
  (let [{:keys [summary]} parsed
        {:keys [message exit]} errors]
    (when message
      (println message)
      (println " "))
    (print-usage script-name summary)
    exit))
(ns penv
  (:require
    [clojure.java.shell :as sh]
    [clojure.string :as string]
    [clojure.tools.cli :refer [parse-opts]]

    [lib.opts :as opts]
    [user]
    )
  (:gen-class))

(def script-name "penv")

(def cli-options
  [["-h" "--help"]])

(defn parse-env
  [env]
  (let [[k v] (string/split env #"=")]
    {:key k
     :value v}))


#_(parse-env "FOO=bar")

(defn protect
  [env]
  (let [{:keys [key value]} env]
    (if (and (some? value) (re-matches #".*(TOKEN|KEY).*" key))
      (assoc env :value (str (subs value 0 4) "-xxxx"))
      env)))


#_(protect (parse-env "FOO=bar"))
#_(protect (parse-env "SLACK_TOKEN=bar"))

(defn env->str
  [env]
  (apply format "%s=%s" ((juxt :key :value) env)))


#_(env->str (protect (parse-env "SLACK_TOKEN=foobarbaz")))

(defn process
  [_options]
  (let [result (sh/sh "env")
        lines (->> (string/split (:out result) #"\n")
                   (map parse-env)
                   (map protect)
                   (map env->str))]
    (run! println lines)))

(defn -main [& args]
  (let [parsed (parse-opts args cli-options)
        {:keys [options]} parsed]
    (or (some->> (opts/find-errors parsed)
                 (opts/print-errors script-name parsed)
                 (System/exit))
        (process options))))
(ns user (:require [penv])) (apply penv/-main *command-line-args*)