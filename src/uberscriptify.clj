(ns uberscriptify
  (:require
    [clojure.java.io :as io]
    [clojure.java.shell :as sh]
    [clojure.string :as string]
    [clojure.tools.cli :refer [parse-opts]]

    [lib.opts :as opts])
  (:gen-class))

(def script-name "uberscriptify")

(def stubdir "scripts")

(def vanilla-shebang
  "#!/usr/bin/env bb\n\n")

(def stream-shebang
  "#!/bin/sh\n\n#_(\n  \"exec\" \"bb\" \"-I\" \"$0\" \"$@\"\n  )\n\n")

(def cli-options
  [["-s" "--script SCRIPT" "Script to process into an uberscript"]
   ["-o" "--out OUTDIR" "Output directory"
    :default "uberscripts"]
   ["-h" "--help"]])

(defn find-errors
  [parsed]
  (opts/find-errors parsed)
  #_(or (opts/find-errors parsed)
        (let [{:keys [arguments]} parsed]
          (cond
            (zero? (count arguments))
            {:message "pass in millis as the first argument"
             :exit 1}))))

(defn get-classpath
  []
  (let [result (sh/sh "clojure" "-Spath")]
    (:out result)))

(defn create-uberscript
  [main-ns]
  (let [tmp (str ".tmp." main-ns)
        cp (get-classpath)
        cmd ["bb" "uberscript" tmp "-cp" cp "-m" main-ns]
        _result (apply sh/sh cmd)
        script (slurp tmp)]
    (.delete (io/file tmp))
    script))

(defn needs-stdin?
  [stub]
  (string/includes? stub "-I"))

(defn process
  [options]
  (let [{:keys [script out]} options
        stub (slurp (io/file stubdir script))
        uberscript (create-uberscript script)
        destination (str out "/" script)]
    (println "Uberscriptifying" script)
    (spit destination
          (str
            (if (needs-stdin? stub)
              stream-shebang
              vanilla-shebang)
            ";; Generated by uberscriptify, do not edit directly.\n\n"
            uberscript))
    (sh/sh "chmod" "+x" destination)
    (println "Done.")))


#_(process {:script "ftime" :out "uberscripts"})
#_(create-uberscript "ftime")

(defn -main [& args]
  (let [parsed (parse-opts args cli-options)
        {:keys [options]} parsed]
    (or (some->> (find-errors parsed)
                 (opts/print-errors script-name parsed)
                 (System/exit))
        (process options))))
